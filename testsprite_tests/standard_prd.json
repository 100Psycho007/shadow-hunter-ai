{
  "meta": {
    "project": "AI Threat Hunting Dashboard",
    "date": "2025-10-15",
    "prepared_by": "Generated by TestSprite"
  },
  "product_overview": "AI Threat Hunting Dashboard is a local cybersecurity analytics and visualization tool designed to assist security analysts and bug bounty hunters in analyzing reconnaissance scan JSON reports. It features a Streamlit web interface for loading, visualizing, filtering, and generating AI-powered threat summaries while maintaining full data privacy and offline capability.",
  "core_goals": [
    "Provide automated loading and validation of reconnaissance JSON reports",
    "Offer comprehensive analytics with KPIs and interactive visualizations",
    "Deliver AI-powered threat summaries through OpenRouter API integration",
    "Ensure security and privacy by local data processing and offline functionality",
    "Support detailed report management with expandable views and filtering"
  ],
  "key_features": [
    "Automated scanning and loading of JSON reconnaissance reports from local /reports/ directory",
    "KPI summary cards showing total reports, subdomains, open ports, and vulnerabilities",
    "Interactive visualizations: subdomain distribution bar chart, open ports pie chart, and timeline activity line chart",
    "Advanced filtering by targets, date ranges, and keyword search",
    "Expandable detailed reports table with sorting, pagination, and drill-down views",
    "AI threat analysis using OpenRouter API with caching, batch processing, and error handling",
    "Secure API key configuration for AI features with environment variable support",
    "Comprehensive error handling and recovery with user-friendly messages",
    "Session state management to preserve user selections and data views",
    "Debug panel and system status monitoring for troubleshooting",
    "Sample data and help system to guide new users",
    "Manual data refresh and force reload capabilities"
  ],
  "user_flow_summary": [
    "User opens the dashboard locally via Streamlit and the app auto-loads JSON reports from /reports/ directory",
    "User reviews KPI summary cards for high-level metrics",
    "User applies filters using sidebar to narrow down reports by target, date, or keyword",
    "User interacts with charts to understand subdomain distribution, port usage, and timeline activity",
    "User expands table rows to view detailed report information including subdomains, open ports, vulnerabilities, and AI summaries",
    "User configures OpenRouter API key if AI threat summaries are desired",
    "User generates AI threat summaries individually or in batch, viewing progress and cached results",
    "User can refresh data manually or force reload if data issues arise",
    "User accesses help and sample data to understand expected report formats and usage"
  ],
  "validation_criteria": [
    "All JSON reports must load without critical errors and validate against defined schema",
    "KPI cards accurately reflect aggregated report data",
    "Filtering controls correctly filter displayed reports and update visualizations accordingly",
    "AI threat summaries are generated only when valid API key is configured and show appropriate error messages if not",
    "The application handles malformed report files gracefully with user notifications",
    "Session state persists user selections and loaded data across page refreshes",
    "Interactive charts render correctly and handle large datasets via truncation or grouping",
    "Detailed reports table supports sorting, pagination, and expandable rows without errors",
    "Caching mechanisms reduce redundant API calls and persist across sessions",
    "Comprehensive error handling provides clear, user-friendly recovery options and messages"
  ],
  "code_summary": {
    "tech_stack": [
      "Python",
      "Streamlit",
      "Plotly",
      "Pandas",
      "Requests",
      "JSON",
      "OpenRouter API",
      "HTML/CSS"
    ],
    "features": [
      {
        "name": "Dashboard Main Interface",
        "description": "Main Streamlit dashboard with header, sidebar, and content areas. Handles session state, page configuration, and overall application layout.",
        "files": [
          "dashboard.py"
        ]
      },
      {
        "name": "Report Data Loading",
        "description": "Loads and validates JSON reconnaissance reports from the filesystem. Handles file I/O, JSON parsing, and schema validation.",
        "files": [
          "src/loader.py"
        ]
      },
      {
        "name": "Analytics and KPI Calculation",
        "description": "Calculates key performance indicators, filters reports, and processes data for visualizations. Handles date parsing and search functionality.",
        "files": [
          "src/analytics.py"
        ]
      },
      {
        "name": "AI Threat Analysis",
        "description": "Integrates with OpenRouter API to generate AI-powered threat assessments. Includes caching, error handling, and batch processing capabilities.",
        "files": [
          "src/ai.py"
        ]
      },
      {
        "name": "KPI Summary Cards",
        "description": "Displays key metrics including total reports, subdomains, average open ports, and vulnerabilities in card format.",
        "files": [
          "dashboard.py"
        ]
      },
      {
        "name": "Data Filtering System",
        "description": "Sidebar filters for target selection, date range filtering, and keyword search across reports, subdomains, and vulnerabilities.",
        "files": [
          "dashboard.py"
        ]
      },
      {
        "name": "Subdomain Distribution Chart",
        "description": "Interactive bar chart showing subdomain counts per target using Plotly. Handles large datasets with truncation and sorting.",
        "files": [
          "dashboard.py"
        ]
      },
      {
        "name": "Port Distribution Visualization",
        "description": "Pie chart displaying open ports distribution across all reports. Groups less common ports into 'Other' category for readability.",
        "files": [
          "dashboard.py"
        ]
      },
      {
        "name": "Timeline Activity Chart",
        "description": "Line chart showing report activity over time with date parsing and aggregation. Displays activity metrics and trends.",
        "files": [
          "dashboard.py"
        ]
      },
      {
        "name": "Detailed Reports Table",
        "description": "Sortable table displaying report summaries with expandable row details. Includes pagination handling and error recovery.",
        "files": [
          "dashboard.py"
        ]
      },
      {
        "name": "Report Details Viewer",
        "description": "Expandable detailed view of individual reports showing subdomains, open ports, vulnerabilities, and AI summaries with error handling.",
        "files": [
          "dashboard.py"
        ]
      },
      {
        "name": "AI Summary Generation",
        "description": "Individual and batch AI summary generation with progress tracking, caching, and comprehensive error handling for API failures.",
        "files": [
          "dashboard.py"
        ]
      },
      {
        "name": "Error Handling and Recovery",
        "description": "Comprehensive error handling throughout the application with user-friendly messages, fallback displays, and recovery options.",
        "files": [
          "dashboard.py",
          "src/loader.py",
          "src/analytics.py",
          "src/ai.py"
        ]
      },
      {
        "name": "Session State Management",
        "description": "Manages application state including loaded reports, filtered data, AI loading states, and user selections across page refreshes.",
        "files": [
          "dashboard.py"
        ]
      },
      {
        "name": "API Key Configuration",
        "description": "Secure API key input and validation for OpenRouter AI services with environment variable support and status indicators.",
        "files": [
          "dashboard.py",
          "src/ai.py"
        ]
      },
      {
        "name": "Data Validation and Schema Checking",
        "description": "Validates JSON report structure, data types, and required fields with detailed error reporting and data quality indicators.",
        "files": [
          "src/loader.py",
          "dashboard.py"
        ]
      },
      {
        "name": "Caching System",
        "description": "AI summary caching to minimize API usage with cache invalidation, persistence, and statistics tracking.",
        "files": [
          "src/ai.py"
        ]
      },
      {
        "name": "Debug and Status Monitoring",
        "description": "Debug information panel, system status monitoring, and comprehensive logging for troubleshooting and monitoring.",
        "files": [
          "dashboard.py"
        ]
      },
      {
        "name": "Sample Data and Help System",
        "description": "Sample report format display, setup guidance, and user help documentation for getting started with the application.",
        "files": [
          "dashboard.py"
        ]
      },
      {
        "name": "Force Reload and Data Refresh",
        "description": "Manual data refresh capabilities with force reload mechanisms for troubleshooting data loading issues.",
        "files": [
          "dashboard.py"
        ]
      }
    ]
  }
}
